name: .NET Core
env:
  ACRREGISTRY: openhackn82382w0acr.azurecr.io
  APPNAME:  openhackn82382w0poi
  RGNAME: openhackn82382w0rg
  COVERALLS_REPO_TOKEN: ${{ secrets.COVERALL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

on:
  push:
    paths: 
      - 'apis/poi/**'
    branches: [ master ]
  pull_request:
    paths: 
      - 'apis/poi/**'
    branches: [ master ]

jobs:
  build:
    name: "build net"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Install dependencies
      run: dotnet restore
      working-directory: apis/poi
      
    - name: Test
      run: | 
        dotnet build 
        dotnet test --no-restore --verbosity normal /p:CollectCoverage=true  /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
      working-directory: apis/poi/tests/UnitTests
      
    - name: Build
      run: |
        dotnet tool install --global dotnet-sonarscanner --version 4.8.0
        dotnet sonarscanner begin /k:nettest /o:ahmstestorg /d:sonar.login=${{ secrets.SONARKEY }} /d:sonar.host.url="https://sonarcloud.io" /d:sonar.javascript.lcov.reportPaths=/tests/UnitTests/lcov/coverage.info
        dotnet build --configuration Release --no-restore 
        dotnet sonarscanner end  /d:sonar.login=${{ secrets.SONARKEY }}
      working-directory: apis/poi
      

    
    - name: Coveralls GitHub Action
      uses: coverallsapp/github-action@v1.1.1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
    # Path to lcov file
        path-to-lcov: apis/poi/tests/UnitTests/lcov/coverage.info
   # The root folder of the project that originally ran the tests

  #  - name: SonarCloud Scan
  #    uses: sonarsource/sonarcloud-github-action@master
  #    with:
  #     projectBaseDir: apis/poi
  #    env:
  #      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
    

        
  release:
    runs-on: ubuntu-latest
    if:  github.ref == 'refs/heads/master' && github.event_name == 'push' 
    needs: [build]
    name: "deploy to docker registry"
    steps:
    # checkout the repo
    - name: 'Checkout Github Action' 
      uses: actions/checkout@master
      
    - name: Hello world
      run: echo Hello world {{env.ACRREGISTRY}} ${{env.APPNAME}}
    
    - uses: azure/docker-login@v1
      with:
        login-server: ${{env.ACRREGISTRY}}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
      name: "docker login"
    
    - run: |
        docker build . -t ${{ env.ACRREGISTRY}}/devopsoh/api-poi:${{ github.run_id }}
        docker push ${{ env.ACRREGISTRY}}/devopsoh/api-poi:${{ github.run_id}} 
      name: "docker build and push"
      working-directory: 'apis/poi/web'
 
  release_to_web_app:
    runs-on: ubuntu-latest
    if:  github.ref == 'refs/heads/master' && github.event_name == 'push' 
    needs: [build]
    name: "deploy Azure Web App"
    steps:
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
  
    - name: 'Run Azure webapp deploy action using publish profile credentials'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.APPNAME}}
        slot-name: staging
        images: '${{ env.ACRREGISTRY}}/devopsoh/api-poi:${{ github.run_id }}'
        
  validate_web_app:
    runs-on: ubuntu-latest
    name: "Validate All Working"
    needs: [release_to_web_app]
    steps:
      - run: | 
            wget https://raw.githubusercontent.com/ahmedsza/ohdevops/master/polling.sh
            bash polling.sh
       
      - run: echo "There is a problem"
        if:  failure()
      
      - run: echo "All good"
        if : env.APISTATUS == 'true'
        
  swap_slots:
    runs-on: ubuntu-latest
    name: "swap slots"
    needs: [validate_web_app]
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp deployment slot swap  -g ${{ env.RGNAME}}  -n ${{ env.APPNAME}}  --slot staging   --target-slot production 
        
  validate_prod_web_app:
    runs-on: ubuntu-latest
    name: "Validate All Working In Prod"
    needs: [swap_slots]
    steps:
      - run: | 
            wget https://raw.githubusercontent.com/ahmedsza/ohdevops/master/pollingprod.sh
            bash pollingprod.sh
       
      - run: echo "There is a problem in prod"
        if:  failure()
      
      - run: echo "All good"
        if : env.APIPRODSTATUS == 'true'
        
  swap_slots_for_bad:
    runs-on: ubuntu-latest
    name: "swap slots for bad deploy"
    needs: [validate_prod_web_app]
    if : failure()
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp deployment slot swap  -g ${{ env.RGNAME}}  -n ${{ env.APPNAME}}  --slot staging   --target-slot production 
      
    
    
      

