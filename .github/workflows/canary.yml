name: Canary
env:
  ACRREGISTRY: openhackn82382w0acr.azurecr.io
  APPNAME:  openhackn82382w0poi
  RGNAME: openhackn82382w0rg
  COVERALLS_REPO_TOKEN: ${{ secrets.COVERALL }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


on:
  issues:


jobs:
  deploytoprod:
    if: github.event.label.name == 'canary'
    name: "deploy to canary"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
  
  
  Deploy10:
    runs-on: ubuntu-latest
    name: "Deploy 10%"
    needs: [deploytoprod]
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp traffic-routing set --distribution staging=50 --name ${{ env.APPNAME}} --resource-group ${{ env.RGNAME}} 
    
  validate_10:
    runs-on: ubuntu-latest
    name: "Validate All Working In 10%"
    needs: [Deploy10]
    steps:
      - run: | 
            wget https://raw.githubusercontent.com/ahmedsza/ohdevops/master/pollingprod.sh
            bash pollingprod.sh
       
      - run: echo "There is a problem in prod"
        if:  failure()
      
      - run: echo "All good"
        if : env.APIPRODSTATUS == 'true'
  
      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed with Canary! ",
              body: body
            });
            
  clear_it_10:
    runs-on: ubuntu-latest
    name: "clear 10% on failure"
    needs: [validate_50]
    if : failure()
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp deployment slot swap   az webapp traffic-routing clear --name ${{ env.APPNAME}}  --resource-group ${{ env.RGNAME}}  
  
  Deploy50:
    runs-on: ubuntu-latest
    
    name: "Deploy 50%"
    needs: [validate_10]
    if: success()
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp traffic-routing set --distribution staging=50 --name ${{ env.APPNAME}} --resource-group ${{ env.RGNAME}} 
    
  validate_50:
    runs-on: ubuntu-latest
    name: "Validate 50"
    needs: [Deploy50]
    steps:
      - run: | 
            wget https://raw.githubusercontent.com/ahmedsza/ohdevops/master/pollingprod.sh
            bash pollingprod.sh
       
      - run: echo "There is a problem in prod"
        if:  failure()
      
      - run: echo "All good"
        if : env.APIPRODSTATUS == 'true'
  
      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed with Canary! ",
              body: body
            });
            
  clear_it_50:
    runs-on: ubuntu-latest
    name: "clear 50"
    needs: [validate_50]
    if : failure()
    steps:    
      - name: 'Login via Azure CLI'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - run: az webapp deployment slot swap   az webapp traffic-routing clear --name ${{ env.APPNAME}}  --resource-group ${{ env.RGNAME}}  

    
      
